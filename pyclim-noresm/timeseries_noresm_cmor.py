#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Friday October 28 17:08:18 2021

@author: Ada Gjermundsen

Calculates timeseries of annual, global mean variables for atmosphere and ocean. Time is given in years

Sea ice variables (area and extent) are calculated for March and September 
(Please note that time is given for March and September such that time series for March will have nans in September and vica versa)
If you use xarray for plotting, that will work just fine 
"""


import sys
# path to the piclim-noresm folder
sys.path.insert(1, '~/pyclim-NorESM/pyclim-noresm/')
from reading_routines_noresm import read_noresm_cmor, Modelinfo
import general_util_funcs as guf
import xarray as xr
xr.set_options(enable_cftimeindex=True)
from dask.diagnostics import ProgressBar
import warnings
warnings.simplefilter('ignore')

def atmos_timeseries(model, varlist, realm = 'Amon', grid = 'gn'):
    '''
    Parameters
    ----------
    model :          python object, with experiment details as attributes (generated by class Modelinfo )
    varlist:         list, list of variable names which will be read and loaded into one xarray.Dataset
    realm:           str, Realm: e.g. Amon, AERmon, CFmon, Omon, SImon
    grid :           str, which grid resolution should be used.  e.g. ['gn', 'gr'] 
                     gn: native grid, 'gr': regridded somehow - not obvious
                     The grid is not really needed unless you want to specify which one particular grid (out of several options)

    Returns
    -------
    ds_atm:            xarray.Dataset with global and annual mean values of the variables in varlist
  
    PLEASE NOTE that NorESM RAW cam.h0 files have incorrect time variable output, this is not the case for cmorized data
    '''

    ds = read_noresm_cmor(model, varlist, realm = realm, grid = grid, dim='time', transform_func=lambda ds: guf.consistent_naming(ds))
    if 'rsdt' in list(ds.keys()) and 'rsut' in list(ds.keys()) and 'rlut' in list(ds.keys()):
        ds['RESTOM'] = ds['rsdt'] - ds['rsut'] - ds['rlut']
        ds['RESTOM'].attrs['long_name'] = 'Net radiative flux at top of model'
        ds['RESTOM'].attrs['units'] = 'W/m2'
        varlist.append('RESTOM')
    ds_atm = ds[varlist].map(guf.global_avg).map(guf.yearly_avg)
    return ds_atm

def ocean_timeseries(model, varlist, cmor = True, realm = 'Omon', grid = 'gn'):
    '''
     Parameters
    ----------
    model :          python object, with experiment details as attributes (generated by class Modelinfo )
    varlist:         list, list of variable names which will be read and loaded into one xarray.Dataset
    realm:           str, Realm: e.g. Amon, AERmon, CFmon, Omon, SImon
    grid :           str, which grid resolution should be used.  e.g. ['gn', 'gr'] 
                     gn: native grid, 'gr': regridded somehow - not obvious
                     The grid is not really needed unless you want to specify which one particular grid (out of several options)

    Returns
    -------
    ds_ocn:            xarray.Dataset with global and annual mean values of the variables in varlist

    '''
    ds = read_noresm_cmor(model, varlist, realm = 'Omon', grid = 'gn',  dim='time', transform_func=lambda ds: guf.consistent_naming(ds))

    areaavg = ds[['tos', 'sos']].map(guf.areaavg_ocn, cmor=cmor).map(guf.yearly_avg)
    areaavg_masked = ds[['tos', 'sos']].map(guf.regionalavg_ocn, lat_low=-90, lat_high=-35, cmor = cmor).map(guf.yearly_avg)
    # NOTE! It is necessary to rename the regional avg variables so they don't overwrite the global mean variables already calculated in areaavg (e.g. sst, sss) 
    areaavg_masked = areaavg_masked.rename({'sos':'sos_90S_35S'})
    areaavg_masked = areaavg_masked.rename({'tos':'tos_90S_35S'})
    yravg = ds[['thetaoga']].map(guf.yearly_avg)
    # AMOC @ 26N, 45N, and max(20N,60N)
    amoc = guf.amoc(ds['msftmz']).map(guf.yearly_avg)
    # Atlantic Ocean heat transport @ 26N, 45N, and max(20N,60N)
    oht = guf.atl_hfbasin(ds['hfbasin']).map(guf.yearly_avg)
    # combine all ocean datasets
    ds_ocn = xr.merge([areaavg, areaavg_masked, amoc, oht, yravg])
    return ds_ocn

def seaice_timeseries(model, varlist, cmor= True,  realm = 'SImon', grid = 'gn'):
    '''
     Parameters
    ----------
    model :          python object, with experiment details as attributes (generated by class Modelinfo )
    varlist:         list, list of variable names which will be read and loaded into one xarray.Dataset
    realm:           str, Realm: e.g. Amon, AERmon, CFmon, Omon, SImon
    grid :           str, which grid resolution should be used.  e.g. ['gn', 'gr'] 
                     gn: native grid, 'gr': regridded somehow - not obvious
                     The grid is not really needed unless you want to specify which one particular grid (out of several options)

    Returns
    -------
    ds_ice:            xarray.Dataset with global and annual mean values of the variables in varlist

    '''
    ds = read_noresm_cmor(model, varlist, realm = 'SImon', grid = 'gn',  dim='time', transform_func=lambda ds: guf.consistent_naming(ds))
    if 'siconc' in varlist:
        # sea-ice extent for March and September
        siext = guf.sea_ice_ext(ds['siconc'],cmor = cmor)
        # sea-ice extent for March and September
        siarea = guf.sea_ice_area(ds['siconc'], cmor = cmor)
        ds_ice = xr.merge([siext, siarea])
    return ds_ice

    
if __name__ == '__main__':
    cmor = True
    expid = 'piControl'
    activity_id = 'CMIP'
    modelname = 'NorESM2-LM'
    realiz = 'r1i1p1f1' 
    outdir =  '/scratch/adagj/noresm_raw/'

    # Create model object with experiment information (not file specific) as attributes
    model = Modelinfo(name = modelname, institute = 'NCC', activity_id = activity_id, expid = expid, realiz=realiz)
    # ATMOSPHERE timeseries
    varlist = ['rsds', 'rsdscs', 'rsdt', 'rsus', 'rsuscs', 'rsut', 'rsutcs', 
               'rlds', 'rlus', 'rlut', 'rlutcs', 'tas', 'clt', 'hfls', 'hfss', 'ts', 'sfcWind']
    ds_atm = atmos_timeseries(model = model, varlist = varlist)

    # OCEAN timeseries
    #raise Exception('End of work')
    varlist = ['tos', 'sos', 'msftmz','hfbasin', 'thetaoga']
    ds_ocn = ocean_timeseries(model = model, varlist = varlist)
    
    #SEA-ICE timeseries
    varlist = ['siconc']
    # sea-ice extent for March and September
    ds_ice = seaice_timeseries(model, varlist) 
    # combine atmosphere, ocean and sea-ice datasets 
    combined = xr.merge([ds_atm, ds_ocn, ds_ice])
    
    # test: only compare the first 6 years
    combined = combined.isel(year = slice(0,6))
    combined = combined.isel(time = slice(0,2*6)) 
    tmp = combined.to_netcdf(outdir + modelname + '_'+ expid + '_' + realiz+ '.%s_%s.timeseries.nc'%(str(combined.year.values[0]).zfill(4), str(combined.year.values[-1]).zfill(4)), compute = False)
    with ProgressBar():
         result = tmp.compute()

